# -*- coding: utf-8 -*-
"""data_catalog.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gPWVHOFb254t3KX1PrV8CIho7PLBJIyf
"""

# Install required libraries
!pip install pandas sentence-transformers pinecone-client

from sentence_transformers import SentenceTransformer
import pandas as pd
from pinecone import Pinecone, ServerlessSpec

# Load the data
df = pd.read_csv('/content/data_catalog.csv')

# Initialize the model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Initialize Pinecone
pc = Pinecone(api_key="25b91f14-c6fc-44f6-aeac-2b7e0f0f7913")  # Replace 'your-api-key' with your actual Pinecone API key

# Create a new index or connect to an existing one
index_name = "metadata-index"
if index_name not in pc.list_indexes().names():
    pc.create_index(
        name=index_name,
        dimension=384,  # The dimension should match the embedding size
        metric='cosine',
        spec=ServerlessSpec(
            cloud='aws',
            region='us-east-1'  # Change the region to a supported one like 'us-east-1'
        )
    )

index = pc.Index(index_name)

# Function to query metadata and provide responses
def query_metadata(query, top_k=5):
    query_embedding = model.encode(query).tolist()
    query_embedding = [float(i) for i in query_embedding]
    results = index.query(vector=[query_embedding], top_k=top_k)
    matched_ids = [match['id'] for match in results['matches']]
    matched_metadata = df.loc[df.index.astype(str).isin(matched_ids)]

    # Create a list to hold the responses
    responses = []

    # Iterate over each matched metadata
    for idx, row in matched_metadata.iterrows():
        response = {
            "table_name": row['table_name'],
            "column_name": row['column_name'],
            "description": row['description']
        }
        # Add a descriptive answer
        response['answer'] = f"The {row['column_name']} column in the {row['table_name']} table represents {row['description']}."
        responses.append(response)

    return responses

# Interactive chat application
print("Welcome to the Interactive Data Exploration Chat!\n")
print("You can ask questions about the available data tables, columns, and their descriptions.\n")
print("Type 'exit' to end the chat.\n")

while True:
    user_input = input("You: ").strip().lower()

    if user_input == 'exit':
        print("Exiting the chat. Goodbye!")
        break

    # Query metadata based on user input
    results = query_metadata(user_input)

    # Check if there are any results
    if not results:
        print("Sorry, I couldn't find any information related to your query.")
    else:
        # Print the interactive answers
        for i, result in enumerate(results, start=1):
            print(f"\nResult {i}:")
            print(result['answer'])

